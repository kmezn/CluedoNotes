@page "/eventHistory"

@using CluedoNotes.Data
@inject CardService CardService

<h1>Event History</h1>
<p>
    List of past events recorded. 
</p>
<p>
    To reset all events for a new game or to delete an individual event <span style="font-weight: bold;">Warning these options are permanent! and cannot be undone. </span>
    <label class="cardNoteSelection">
        Show detailed events?
        <InputCheckbox class="cardShownCheckbox" style="margin:5px;"
                       @bind-Value="_enableDelete" />
    </label>
    @if (_enableDelete)
    {
        <br />
        <span>Reset data for next games (keeps cards and player names.removed all event History and Held Cards.)</span>
    <button class="btn btn-info"
            @onclick="ResetGame">
        Reset!
    </button>
    }
    
</p>


@if (_heldCards == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-fixed">
        <thead>
            <tr>
                <th>Log Id</th>
                <th>Card Type</th>
                <th>Card Name</th>
                <th>Guess Event Id</th>
                <th>Held by</th>
                @if (_enableDelete)
                {
                    <th>Actions:</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var heldCard in _heldCards.OrderByDescending(o => o.Id))
            {
                <tr>
                    <td>@heldCard.Id</td>
                    <td>
                        @switch (heldCard.Card.CardType)
                        {
                            case CardType.Room:
                                <span class="oi oi-flag" aria-hidden="true"></span>
                                break;
                            case CardType.Suspect:
                                <span class="oi oi-person" aria-hidden="true"></span>
                                break;
                            case CardType.Weapon:
                                <span class="oi oi-tag" aria-hidden="true"></span>
                                break;
                            default:
                                <span class="oi oi-question-mark" aria-hidden="true"></span>
                                break;
                        }
                        @heldCard.Card.CardType
                    </td>
                    <td>@heldCard.Card.Name</td>
                    <td>
                        @switch (heldCard.LogType)
                        {
                            case LogType.MyCard:
                            case LogType.CardSeen:
                            case LogType.NoCardEvent:
                                <span class="oi oi-@heldCard.TickStyle.ToString()" style="color:@heldCard.TickColour.ToString()"></span>
                                break;
                            case LogType.PossibleCardEvent:
                                <span style="border: 2px solid @heldCard.TickColour.ToString();margin: 2px;">@heldCard.EventId</span>
                                break;
                        }

                    </td>
                    <td>@heldCard.Player.Name</td>
                    @if (_enableDelete)
                    {
                        <td>
                            <button class="btn btn-danger"
                                    @onclick="(() => DeleteEvent(heldCard))">
                                Delete
                            </button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    bool _enableDelete = false;
    List<HeldCard> _heldCards = new List<HeldCard>();
    protected override async Task OnInitializedAsync()
    {
        _heldCards = await CardService.GetHeldCardsAsync();
    }

    async Task DeleteEvent(HeldCard heldCard)
    {
        await CardService.DeleteHistroyEvent(heldCard);
        await OnInitializedAsync();
    }

    async Task ResetGame()
    {
        await CardService.ResetEventHistory();
        await OnInitializedAsync();
    }

}
