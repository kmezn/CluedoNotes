@page "/SetupPlayers"
@using CluedoNotes.Data
@inject PlayerService PlayerService
<h1>Setup Players</h1>
<p style="color:red">@Error</p>
@if (players == null)
{
    <!-- Show this if the current user has no data... yet... -->
    <p><em>Loading...</em></p>
}
else
{
    <!-- Show the forecasts for the current user -->
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Held Cards</th>
                <th>Possible Cards</th>
                @* <th>IsWeapon</th> *@
                <th> </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in players)
            {
                <tr>
                    <td>@player.Name</td>
                    <td>
                        @if (player.HeldCards != null)
                            @foreach (var heldCard in player.HeldCards.Where(c => c.IsConfirmed))
                            {
                                <div class="nav-item px-3">
                                    @switch (heldCard.Card.CardType)
                                        {
                                            case CardType.Room:
                                                <span class="oi oi-flag" aria-hidden="true"></span>
                                                break;
                                            case CardType.Suspect:
                                                <span class="oi oi-person" aria-hidden="true"></span>
                                                break;
                                            case CardType.Weapon:
                                                <span class="oi oi-tag" aria-hidden="true"></span>
                                                break;
                                            default:
                                                <span class="oi oi-question-mark" aria-hidden="true"></span>
                                                break;
                                        }
                                        @* // heldCard.Id @heldCard.Card.CardType *@
                                        @heldCard.Card.Name 
                                    
                                </div>
                            }
                    </td>
                    <td>
                        @if (player.HeldCards != null)
                            @foreach (var heldCard in player.HeldCards.Where(c => !c.IsConfirmed))
                            {
                                <div class="nav-item px-3">
                                    @switch (heldCard.Card.CardType)
                                    {
                                        case CardType.Room:
                                            <span class="oi oi-flag" aria-hidden="true"></span>
                                            break;
                                        case CardType.Suspect:
                                            <span class="oi oi-person" aria-hidden="true"></span>
                                            break;
                                        case CardType.Weapon:
                                            <span class="oi oi-tag" aria-hidden="true"></span>
                                            break;
                                        default:
                                            <span class="oi oi-question-mark" aria-hidden="true"></span>
                                            break;
                                    }
                                    @* // heldCard.Id @heldCard.Card.CardType *@
                                    @heldCard.Card.Name
                                </div>
                            }
                    </td>
                    <td>
                        <!-- Edit the current card -->
                        @if (player.Id != 0)
                        {
                            <button class="btn btn-primary"
                                    @onclick="(() => EditPlayer(player))">
                                Edit
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <p>
        <!-- Add a new card -->
        <button class="btn btn-success"
            @onclick="AddNewPlayer">
            Add New Player
        </button>
    </p>

}


@if (ShowPlayerPopup)
{
    <!-- This is the popup to create or edit a forecast -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Add / Edit Player</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                    @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current forecast -->
                <div class="modal-body">
                    <input class="form-control" type="text"
                           placeholder="Player Name"
                    @bind="objPlayer.Name" />
@*                     <InputRadioGroup>
                        <InputRadio Name="Suspect" Value="objCard.IsWeapon = true"></InputRadio>
                    </InputRadioGroup> *@

                    @* <InputSelect class="form-control" @bind-Value="@objCard.CardType">
                        @foreach (var type in Enum.GetValues(typeof(CardType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect> *@
                    @* <input class="form-control" type="text"
                           placeholder="Fahrenheit forecast"
                    @bind="objWeatherForecast.TemperatureF" /> *@
                    @* <input class="form-control" type="text"
                           placeholder="Summary"
                    @bind="objWeatherForecast.Summary" /> *@
                    <br />
                    <!-- Button to save the forecast -->
                    <button class="btn btn-success"
                    @onclick="SaveCard">
                        Save
                    </button>&nbsp;
                    <!-- Only show delete button if not a new record -->
                     @if (objPlayer.Id > 0)
                    {
                        <!-- Button to delete the forecast -->
                        <button class="btn btn-danger"
                        @onclick="DeletePlayer">
                            Delete
                        </button>
                    } 
                </div>
            </div>
        </div>
    </div>
}


@code
{
    string Error = "";
    List<Player> players = new List<Player>();
    Player objPlayer = new Player();
    bool ShowPlayerPopup = false;
    protected override async Task OnInitializedAsync()
    {
        // Get the forecasts
        players = await PlayerService.GetPlayersAsync();
    }
    void AddNewPlayer()
    {
        // Make new forecast
        objPlayer = new Player();
        // Set Id to 0 so we know it is a new record
        objPlayer.Id = 0;
        // Open the Popup
        ShowPlayerPopup = true;
    }
    void EditPlayer(Player player)
    {
        // Set the selected forecast
        // as the current forecast
        objPlayer = player;
        // Open the Popup
        ShowPlayerPopup = true;
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPlayerPopup = false;
    }

    async Task SaveCard()
    {
        // Close the Popup
        ShowPlayerPopup = false;
        Error = "";
        try
        {
            // A new forecast will have the Id set to 0
            if (objPlayer.Id == 0)
            {
                // Create new forecast
                // Player objNewPlayer = new Player();
                // objNewPlayer.Name = objCard.Name;
                // objNewPlayer.CardType = objCard.CardType;
                // objNewWeatherForecast.Summary = objWeatherForecast.Summary;
                // objNewWeatherForecast.TemperatureC =
                // Convert.ToInt32(objWeatherForecast.TemperatureC);
                // objNewWeatherForecast.TemperatureF =
                // Convert.ToInt32(objWeatherForecast.TemperatureF);
                // Save the result
                var newPlayer =
                    await PlayerService.CreatePlayerAsync(objPlayer);
                // Add the Forcast
                players.Add(newPlayer);
            }
            else
            {
                //This is an update
                await PlayerService.UpdatePlayerAsync(objPlayer);
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }


    async Task DeletePlayer()
    {
        // Close the Popup
        ShowPlayerPopup = false;
        try
        {
            Error = "";
            // Delete the forecast
            await PlayerService.DeletePlayerAsync(objPlayer);
            // Remove the Forcast
            players.Remove(objPlayer);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }
}