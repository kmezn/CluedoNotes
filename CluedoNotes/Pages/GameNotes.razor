@page "/GameNotes"
@using CluedoNotes.Data
@inject PlayerService PlayerService
@inject CardService CardService
<h1>Players</h1>
<p style="color:red">@_Error</p>
@if (_Players == null && _Cards == null)
{
    <!-- Show this if the current user has no data... yet... -->
    <p><em>Loading...</em></p>
}
else
{
    <p>
        @* <button class="btn btn-success"
    @onclick="AddNewSeenCardEvent">
    Add Confirmed Card Seen Event
    </button> *@
        <div class="notesDisplaySettings">
            <label class="cardNoteSelection">
                Show detailed events?
                <InputCheckbox class="cardShownCheckbox" style="margin:5px;"
                               @bind-Value="_showDetailedEvents" />
            </label>
            <button class="btn btn-info"
                    @onclick="AddNewSeenCardEvent">
                My Cards.
            </button>
        </div>
        <div class="notesDisplaySettings">
            <button class="btn btn-info"
                    @onclick="AddNewCardGuessEvent">
                Add Card Guess Event
            </button>
        </div>
    </p>
    <table class="table table-fixed notes-table">
        <thead>
            <tr>
                <th class="sticky">@* Card *@</th>
                @foreach (var player in _Players.Where(p => p.Id != 0))
                {
                    <th class="sticky">@player.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var card in _Cards.OrderBy(o => o.CardType).ThenBy(t => t.Name))
            {
                if (card.CardType != _prevCardType)
                {
                    _prevCardType = card.CardType;
                    <tr><th>@card.CardType.ToString()</th></tr>
                }
                <tr>
                    <td>
                        @*icon for showing the card is invalid for a guess.*@
                        @if (_Players.Any(p => p.HeldCards.Any(h => h.IsConfirmed && card.Id == h.CardId)))
                        {
                            <span class="oi oi-@_settings.ConfirmedNoCardStyle.ToString()" style="color:@_settings.ConfirmedNoCardColour.ToString()"></span>
                        }

                        @card.Name @* the table headers down the left *@

                        @*icon for showing the card is owned by the player.*@
                        @if (_Players.Any(p => p.Id == 0 && p.HeldCards.Any(h => h.IsConfirmed && card.Id == h.CardId)))
                        {
                            <span class="oi oi-@_settings.MyCardStyle.ToString()" style="color:@_settings.MyCardColour.ToString()"></span>
                        }
                    </td>
                    @foreach (var player in _Players.Where(p => p.Id != 0))
                    {// the main table section.
                        <td>
                            <div class="lowerCheckArea">
                            @{
                                var playerHeldCards = player.HeldCards.Where(w => w.CardId == card.Id);
                                var myCards = _Players.Where(p => p.Id == 0).First();
                                if (!playerHeldCards.Any(a => a.IsConfirmed) || playerHeldCards.Any(a => a.TickColour == _settings.MyCardColour))
                                {
                                    
                                        @*// simplified flag for "Card not owned"*@
                                        @if (!_showDetailedEvents
                                           && (playerHeldCards.Any(h => h.TickColour == _settings.ConfirmedNoCardColour || h.TickColour == _settings.MyCardColour)
                                                 || myCards.HeldCards.Any(h => h.TickColour == _settings.MyCardColour && h.CardId == card.Id)))
                                        {
                                            <span class="oi oi-@_settings.ConfirmedNoCardStyle.ToString()" style="color:@_settings.ConfirmedNoCardColour.ToString()"></span>
                                        }


                                        @*Flag for My Card interactions.*@
                                        // @if (playerHeldCards.Any(h => h.TickColour == _settings.MyCardColour && h.CardId == card.Id))
                                        // {
                                        //     <span class="oi oi-x oi-bold align-self-center" alt="Confirmed" style="color:@_settings.MyCardColour.ToString()"></span>
                                        // }


                                        @*// loop through card events.  - not seen and not owned*@
                                        @foreach (var heldEvent in @playerHeldCards.Where(w => !w.IsConfirmed))
                                        {
                                            if (_showDetailedEvents || heldEvent.TickColour == _settings.CardShownColour || heldEvent.TickColour == _settings.MyCardColour)
                                            {
                                                <span style="border: 2px solid @heldEvent.TickColour.ToString();margin: 2px;">@heldEvent.EventId</span>
                                            }
                                        }
                                    
                                }

                                @foreach (var heldEvent in playerHeldCards.Where(w => w.IsConfirmed))
                                {
                                        <span class="oi oi-@heldEvent.TickStyle.ToString()" style="color:@heldEvent.TickColour.ToString()"></span>
                                }

                            }
                            </div>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <p>
        @* <button class="btn btn-success"
    @onclick="AddNewSeenCardEvent">
    Add Confirmed Card Seen Event
    </button> *@
        @*         <button class="btn btn-info"
    @onclick="AddNewCardGuessEvent">
    Add Card Guess Event
    </button> *@
    </p>

}

@if (_ShowConfirmCardPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">
                        Select the player and relevent card(s)
                    </h3>
                    <p style="color:red">@_Error</p>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="CloseCardConfirmPopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    @*Select player or 'my cards'*@
                    <InputSelect id="SelectedPlayerId" class="form-control" @bind-Value="_objPlayer.Id">
                        @foreach (var p in _Players)
                        {
                            <option value="@p.Id">@p.Name</option>
                        }
                    </InputSelect>

                    @if (_objPlayer.Id != 0)
                    { @* Use same menu to track cards shown to other players.*@
                        <label class="cardNoteSelection">
                            Show Card to Player
                            <InputCheckbox class="" style="margin:5px;"
                                           @bind-Value="_objPlayer.TmpShownMyCard"></InputCheckbox>
                        </label>
                    }



                    <div class="cardConfirmSelectSection">
                        <h4>@CardType.Suspect</h4>
                        <div class="suspectSection">
                            @{
                                var me = _Players.First(f => f.Id == 0);
                                foreach (var objCard in _MyCards.Where(w => w.CardType == CardType.Suspect
                                && ((_objPlayer.TmpShownMyCard && me.HeldCards.Any(a => a.CardId == w.Id))
                                || !_objPlayer.TmpShownMyCard)
                                ).OrderBy(t => t.Name))
                                {
                                    <label class="cardNoteSelection">
                                        @objCard.Name
                                        <InputCheckbox class="" style="margin:5px;"
                                                       @bind-Value="objCard.Selected"></InputCheckbox>
                                    </label>
                                }
                            }
                        </div>
                        <h4>@CardType.Room</h4>
                        <div class="roomSection">
                            @{
                                foreach (var objCard in _MyCards.Where(w => w.CardType == CardType.Room
                                && ((_objPlayer.TmpShownMyCard && me.HeldCards.Any(a => a.CardId == w.Id))
                                || !_objPlayer.TmpShownMyCard)).OrderBy(t => t.Name))
                                {
                                    <label class="cardNoteSelection">
                                        @objCard.Name
                                        <InputCheckbox class="" style="margin:5px;"
                                                       @bind-Value="objCard.Selected"></InputCheckbox>
                                    </label>
                                }
                            }
                        </div>

                        <h4>@CardType.Weapon</h4>
                        <div class="weaponSection">
                            @{
                                foreach (var objCard in _MyCards.Where(w => w.CardType == CardType.Weapon && ((_objPlayer.TmpShownMyCard && me.HeldCards.Any(a => a.CardId == w.Id))
                                || !_objPlayer.TmpShownMyCard)).OrderBy(t => t.Name))
                                {
                                    <label class="cardNoteSelection">
                                        @objCard.Name
                                        <InputCheckbox class="" style="margin:5px;"
                                                       @bind-Value="objCard.Selected"></InputCheckbox>
                                    </label>
                                }
                            }
                        </div>
                    </div>
                    <br />
                    <button class="btn btn-success"
                            @onclick="CardSeen">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@if (_ShowCardGuessPopup)
{
    <!-- This is the popup to create or edit a forecast -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">
                        Select the 3 cards requested
                    </h3>
                    <p style="color:red">@_Error</p>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="CloseCardGuessPopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="cardSelectSection">
                        <h4>@CardType.Room</h4>
                        <div class="roomSection">
                            @{
                                var roomSelected = _Cards.Where(w => w.CardType == CardType.Room && w.Selected).Any();
                                foreach (var objCard in _Cards.Where(w => w.CardType == CardType.Room).OrderBy(t => t.Name))
                                {
                                    if (!(roomSelected && !objCard.Selected))
                                    {
                                        <label class="cardNoteSelection">
                                            @objCard.Name
                                            <InputCheckbox class="" style="margin:5px;"
                                                           @bind-Value="objCard.Selected"></InputCheckbox>
                                        </label>
                                    }
                                }
                            }
                        </div>
                        <h4>@CardType.Suspect</h4>
                        <div class="suspectSection">
                            @{
                                var suspectSelected = _Cards.Where(w => w.CardType == CardType.Suspect && w.Selected).Any();
                                foreach (var objCard in _Cards.Where(w => w.CardType == CardType.Suspect).OrderBy(t => t.Name))
                                {
                                    if (!(suspectSelected && !objCard.Selected))
                                    {
                                        <label class="cardNoteSelection">
                                            @objCard.Name
                                            <InputCheckbox class="" style="margin:5px;"
                                                           @bind-Value="objCard.Selected"></InputCheckbox>
                                        </label>
                                    }
                                }
                            }
                        </div>
                        <h4>@CardType.Weapon</h4>
                        <div class="weaponSection">
                            @{
                                var weaponSelected = _Cards.Where(w => w.CardType == CardType.Weapon && w.Selected).Any();
                                foreach (var objCard in _Cards.Where(w => w.CardType == CardType.Weapon).OrderBy(t => t.Name))
                                {
                                    if (!(weaponSelected && !objCard.Selected))
                                    {
                                        <label class="cardNoteSelection">
                                            @objCard.Name
                                            <InputCheckbox class="" style="margin:5px;"
                                                           @bind-Value="objCard.Selected"></InputCheckbox>
                                        </label>
                                    }
                                }
                            }
                        </div>
                    </div>
                    <div>
                        @if (roomSelected && suspectSelected && weaponSelected)
                        {
                            foreach (var p in _Players.Where(p => p.Id != 0))
                            {
                                <h4>
                                    @p.Name
                                </h4>
                                @if (!p.TmpHasACard)
                                {
                                    <label class="cardNoteSelection">
                                        No card held
                                        <InputCheckbox class="noCardCheckbox" style="margin:5px;"
                                                       @bind-Value="p.TmpHasNoCard" />
                                    </label>
                                }
                                @if (!p.TmpHasNoCard)
                                {
                                    <label class="cardNoteSelection">
                                        Card Shown
                                        <InputCheckbox class="cardShownCheckbox" style="margin:5px;"
                                                       @bind-Value="p.TmpHasACard" />
                                    </label>
                                }

                            }
                        }
                    </div>
                    <br />
                    <button class="btn btn-success"
                            @onclick="SaveCardGuess">
                        Save
                    </button>
                    @* </div>  *@

                </div>
            </div>
        </div>
    </div>
}


@code
{
    string _Error = "";
    List<Player> _Players = new List<Player>();
    List<Card> _Cards = new List<Card>();
    List<Card> _MyCards = new List<Card>();
    Player _objPlayer = new Player();
    Settings _settings = new Settings();
    CardType _prevCardType = CardType.Weapon;
    bool _ShowCardGuessPopup = false;
    bool _ShowConfirmCardPopup = false;
    bool _IsCardConfirmed = true;
    bool _showDetailedEvents = false;

    protected override async Task OnInitializedAsync()
    {
        _Players = await PlayerService.GetPlayersAsync();
        _Cards = await CardService.GetCardsAsync();
        _settings = await PlayerService.GetSettingsAsync();
        StateHasChanged();
    }

    void AddNewSeenCardEvent()
    {
        _objPlayer = new Player();
        // Set Id to 0 for 'my cards'
        _objPlayer.Id = 0;
        _MyCards = _Cards;

        _ShowConfirmCardPopup = true;
    }

    void AddNewCardGuessEvent()
    {
        // Make new forecast
        _objPlayer = new Player();
        // Set Id to 0 so we know it is a new record
        _objPlayer.Id = 0;
        // Open the Popup for a guess event.
        _IsCardConfirmed = false;
        _ShowCardGuessPopup = true;
    }
    // void EditPlayerCards(Player player)
    // {
    //     // Set the selected forecast
    //     // as the current forecast
    //     _objPlayer = player;
    //     // Open the Popup
    //     _ShowCardGuessPopup = true;
    // }

    async void CloseCardGuessPopup()
    {
        string _Error = "";
        _ShowCardGuessPopup = false;
        await OnInitializedAsync();
    }
    async void CloseCardConfirmPopup()
    {
        string _Error = "";
        _ShowConfirmCardPopup = false;
        await OnInitializedAsync();
    }
    async Task CardSeen()
    {
        try
        {

            _objPlayer.TmpHasACard = true;
            _objPlayer.TmpIsConfirmed = true;
            await PlayerService.UpdatePlayerCardsAsync(_objPlayer, _MyCards.Where(w => w.Selected).ToList());
            CloseCardConfirmPopup();

        }
        catch (Exception ex)
        {
            _Error = ex.Message;
        }
    }
    async Task SaveCardGuess()
    {
        // Close the Popup
        // _ShowPlayerCardsPopup = false;
        _Error = "";
        try
        {

            await CardService.CreateHeldCardGuess(_Players, _Cards.Where(w => w.Selected).ToList());
        }
        catch (Exception ex)
        {
            _Error = ex.Message;
        }

        CloseCardGuessPopup();

    }
}