@page "/GameNotes"
@using CluedoNotes.Data
@inject PlayerService PlayerService
@inject CardService CardService
<h1>Players</h1>
<p style="color:red">@_Error</p>
@if (_Players == null && _Cards == null)
{
    <!-- Show this if the current user has no data... yet... -->
    <p><em>Loading...</em></p>
}
else
{
    <!-- Show the forecasts for the current user -->
    <table class="table">
        <thead>
            <tr>
                <th> </th>
                <th> </th>
                @foreach (var player  in _Players)
                {
                    <th>@player.Name</th>
                }
@*                 <th>Held Cards</th>
                <th>Possible Cards</th> *@
                @* <th>IsWeapon</th> *@
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in _Cards.OrderBy(o => o.CardType).ThenBy(t => t.Name))
            {
                if (card.CardType != _prevCardType)
                {
                    _prevCardType = card.CardType;
                    <tr><th>@card.CardType.ToString()</th></tr>
                }
                <tr>
                    <td> </td>
                    <td>@* @card.CardType<br /> *@
                        @card.Name</td>
                    @foreach (var player in _Players)
                    {
                        <td>
                            @{
                                var playerHeldCards = player.HeldCards.Where(w => w.CardId == card.Id);
                                if (playerHeldCards.Any(a => a.IsConfirmed))
                                {
                                    <span class="oi oi-check oi-bold align-self-center" alt="Confirmed" style="color:green"></span>
                                } 
                                <div class="lowerCheckArea">
                                @foreach (var eventId in @playerHeldCards.Where(w => !w.IsConfirmed).Select(s => s.EventId))
                                {
                                    <span style="border: 1px solid green;margin: 2px;">@eventId</span>
                                }
                                </div>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <p>
        <!-- Add a new card -->
        <button class="btn btn-success"
        @onclick="AddNewSeenCardEvent">
            Add Confirmed Card Seen Event
        </button>
        <button class="btn btn-info"
        @onclick="AddNewCardGuessEvent">
            Add Card Guess Event
        </button>
    </p>

}


@if (_ShowPlayerCardsPopup)
{
    <!-- This is the popup to create or edit a forecast -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">
                        @if (_IsCardConfirmed)
                        {
                            <span>Card Seen! (select the card below)</span>
                        } else
                        {
                            <span>Someone else saw a card! (select the cards that were possibly shown)</span>
                        }
                    </h3>
                    <p style="color:red">@_Error</p>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                    @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current forecast -->
                <div class="modal-body">
                    <h4 type="text">@_objPlayer.Name</h4>
                    <InputSelect id="SelectedPlayerId" class="form-control" @bind-Value="_objPlayer.Id">
                    <option value="0">Select a Player</option>
                        @foreach (var p in _Players)
                        {
                            <option value="@p.Id">@p.Name</option>
                        }
                    </InputSelect>
                    @if (_objPlayer.Id != 0)
                        if(_IsCardConfirmed)
                        {
                            <div class="hiddenIfPlayer0">
                                @foreach (var objCard in _Cards.OrderBy(o => o.CardType).ThenBy(t => t.Name))
                                {
                                    if (objCard.CardType != _prevCardType)
                                    {
                                        _prevCardType = objCard.CardType;
                                        <h4>@objCard.CardType.ToString()</h4>
                                    }
                                    <button class="btn btn-info" style="margin:5px;"
                                    @onclick="(() => CardSeen(objCard))">
                                        @objCard.Name
                                    </button>
                                }
                            </div>
                        } else
                        {
                            <div class="hiddenIfPlayer0">
                                @* // Modal for a card guess (i.e. card shown to someone else and unsure which one.) *@
                                @foreach (var objCard in _Cards.OrderBy(o => o.CardType).ThenBy(t => t.Name))
                                {
                                    if (objCard.CardType != _prevCardType)
                                    {
                                        _prevCardType = objCard.CardType;
                                        <h4>@objCard.CardType.ToString()</h4>
                                    }
                                    <label>@objCard.Name
                                    <InputCheckbox class="" style="margin:5px;"
                                        @bind-Value="objCard.Selected" ></InputCheckbox>
                                    </label>
                                }
                                <br />
                                <button class="btn btn-success"
                                @onclick="SaveCardGuess">
                                    Save
                                </button>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>
}


@code
{
    string _Error = "";
    List<Player> _Players = new List<Player>();
    List<Card> _Cards = new List<Card>();
    Player _objPlayer = new Player();
    CardType _prevCardType = CardType.Weapon;
    bool _ShowPlayerCardsPopup = false;
    bool _IsCardConfirmed = true;
    protected override async Task OnInitializedAsync()
    {
        // Get the forecasts
        _Players = await PlayerService.GetPlayersAsync();
        _Cards = await CardService.GetCardsAsync();
    }

    void AddNewSeenCardEvent()
    {
        // Make new forecast
        _objPlayer = new Player();
        // Set Id to 0 so we know it is a new record
        _objPlayer.Id = 0;
        // Open the Popup for confirmed cards. 
        _IsCardConfirmed = true;
        _ShowPlayerCardsPopup = true;
    }

    void AddNewCardGuessEvent()
    {
        // Make new forecast
        _objPlayer = new Player();
        // Set Id to 0 so we know it is a new record
        _objPlayer.Id = 0;
        // Open the Popup for a guess event. 
        _IsCardConfirmed = false;
        _ShowPlayerCardsPopup = true;
    }
    void EditPlayerCards(Player player)
    {
        // Set the selected forecast
        // as the current forecast
        _objPlayer = player;
        // Open the Popup
        _ShowPlayerCardsPopup = true;
    }

    void ClosePopup()
    {
        string _Error = "";
        _ShowPlayerCardsPopup = false;
    }
    async Task CardSeen(Card objCard)
    {
        try
        {
            if (_objPlayer.HeldCards.Where(c => c.CardId == objCard.Id).Any())
            {
                _objPlayer.HeldCards.Single(c => c.CardId == objCard.Id).IsConfirmed = true;

            }
            else
            {
                _objPlayer.HeldCards.Add(new HeldCard()
                    {
                        Card = objCard,
                        CardId = objCard.Id,
                        PlayerId = _objPlayer.Id,
                        IsConfirmed = true
                    });
            }
            await PlayerService.UpdatePlayerCardsAsync(_objPlayer);

            // ToDo need to set up event for updating the current view model!
            ClosePopup();
        }
        catch (Exception ex)
        {
            _Error = ex.Message;
        }
    }
    async Task SaveCardGuess() //ToDo change to being an event for guessing at a card.
    {
        // Close the Popup
        _ShowPlayerCardsPopup = false;
        _Error = "";
        try
        {
                var newPlayer =
                    await CardService.CreateHeldCardGuess(_objPlayer.Id, _Cards.Where(w => w.Selected).ToList());
        }
        catch (Exception ex)
        {
            _Error = ex.Message;
        }
    }


    async Task DeleteCard()
    {
        // Close the Popup
        _ShowPlayerCardsPopup = false;
        try
        {
            _Error = "";
            // Delete the forecast
            await PlayerService.DeletePlayerAsync(_objPlayer);
            // Remove the Forcast
            _Players.Remove(_objPlayer);
        }
        catch (Exception ex)
        {
            _Error = ex.Message;
        }
    }
}