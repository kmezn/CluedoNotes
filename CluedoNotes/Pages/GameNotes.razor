@page "/GameNotes"
@using CluedoNotes.Data
@inject PlayerService PlayerService
@inject CardService CardService
<h1>Players</h1>
<p style="color:red">@_Error</p>
@if (_Players == null && _Cards == null)
{
    <!-- Show this if the current user has no data... yet... -->
    <p><em>Loading...</em></p>
}
else
{
    <p>
        @* <button class="btn btn-success"
    @onclick="AddNewSeenCardEvent">
    Add Confirmed Card Seen Event
    </button> *@
        <button class="btn btn-info"
                @onclick="AddNewCardGuessEvent">
            Add Card Guess Event
        </button>
    </p>
    <table class="table table-fixed notes-table">
        <thead>
            <tr>
                <th class="sticky">@* Card *@</th>
                @foreach (var player in _Players)
                {
                    <th class="sticky">@player.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var card in _Cards.OrderBy(o => o.CardType).ThenBy(t => t.Name))
            {
                if (card.CardType != _prevCardType)
                {
                    _prevCardType = card.CardType;
                    <tr><th>@card.CardType.ToString()</th></tr>
                }
                <tr>
                    <td>@card.Name</td>
                    @foreach (var player in _Players)
                    {
                        <td>
                            @{
                                var playerHeldCards = player.HeldCards.Where(w => w.CardId == card.Id);
                                @foreach (var heldEvent in @playerHeldCards.Where(w => w.IsConfirmed))
                                {
                                    <span class="oi oi-check oi-bold align-self-center" alt="Confirmed" style="color:@heldEvent.TickColour.ToString()"></span>
                                }
                                <div class="lowerCheckArea">
                                    @foreach (var heldEvent in @playerHeldCards.Where(w => !w.IsConfirmed))
                                    {
                                        <span style="border: 2px solid @heldEvent.TickColour.ToString();margin: 2px;">@heldEvent.EventId</span>
                                    }
                                </div>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <p>
        <button class="btn btn-success"
                @onclick="AddNewSeenCardEvent">
            Add Confirmed Card Seen Event
        </button>
        <button class="btn btn-info"
                @onclick="AddNewCardGuessEvent">
            Add Card Guess Event
        </button>
    </p>

}


@if (_ShowPlayerCardsPopup)
{
    <!-- This is the popup to create or edit a forecast -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">
                        Select the 3 cards requested
                    </h3>
                    <p style="color:red">@_Error</p>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="cardSelectSection">
                        @* <InputSelect class="form-control" @bind-Value="_cardTickColour">
                            @foreach (var type in Enum.GetValues(typeof(TickColour)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect> *@
                        <h4>@CardType.Room</h4>
                        <div class="roomSection">
                            @{
                                var roomSelected = _Cards.Where(w => w.CardType == CardType.Room && w.Selected).Any();
                                foreach (var objCard in _Cards.Where(w => w.CardType == CardType.Room).OrderBy(o => o.CardType).ThenBy(t => t.Name))
                                {
                                    if (!(roomSelected && !objCard.Selected))
                                    {
                                        <label class="cardNoteSelection">
                                            @objCard.Name
                                            <InputCheckbox class="" style="margin:5px;"
                                                           @bind-Value="objCard.Selected"></InputCheckbox>
                                        </label>
                                    }
                                }
                            }
                        </div>
                        <h4>@CardType.Suspect</h4>
                        <div class="suspectSection">
                            @{
                                var suspectSelected = _Cards.Where(w => w.CardType == CardType.Suspect && w.Selected).Any();
                                foreach (var objCard in _Cards.Where(w => w.CardType == CardType.Suspect).OrderBy(o => o.CardType).ThenBy(t => t.Name))
                                {
                                    if (!(suspectSelected && !objCard.Selected))
                                    {
                                        <label class="cardNoteSelection">
                                            @objCard.Name
                                            <InputCheckbox class="" style="margin:5px;"
                                                           @bind-Value="objCard.Selected"></InputCheckbox>
                                        </label>
                                    }
                                }
                            }
                        </div>
                        <h4>@CardType.Weapon</h4>
                        <div class="weaponSection">
                            @{
                                var weaponSelected = _Cards.Where(w => w.CardType == CardType.Weapon && w.Selected).Any();
                                foreach (var objCard in _Cards.Where(w => w.CardType == CardType.Weapon).OrderBy(o => o.CardType).ThenBy(t => t.Name))
                                {
                                    if (!(weaponSelected && !objCard.Selected))
                                    {
                                        <label class="cardNoteSelection">
                                            @objCard.Name
                                            <InputCheckbox class="" style="margin:5px;"
                                                           @bind-Value="objCard.Selected"></InputCheckbox>
                                        </label>
                                    }
                                }
                            }
                        </div>
                    </div>
                    <div>
                        @if(roomSelected && suspectSelected && weaponSelected){
                            foreach (var p in _Players)
                            {
                                <h4>
                                    @p.Name
                                </h4>
                                    @if (!p.HasACard){
                                        <label class="cardNoteSelection">
                                            No card held
                                            <InputCheckbox class="noCardCheckbox" style="margin:5px;"
                                                           @bind-Value="p.HasNoCard" />
                                        </label>
                                    }
                                    @if (!p.HasNoCard)
                                    {
                                        <label class="cardNoteSelection">
                                            Card Shown
                                            <InputCheckbox class="cardShownCheckbox" style="margin:5px;"
                                            @bind-Value="p.HasACard" />
                                        </label>
                                    }
                                
                            }
                        }
                    </div>
                    @*<div class="hiddenIfPlayer0">
                @* // Modal for a card guess (i.e. card shown to someone else and unsure which one.)

                @foreach (var objCard in _Cards.OrderBy(o => o.CardType).ThenBy(t => t.Name))
                {
                if (objCard.CardType != _prevCardType)
                {
                _prevCardType = objCard.CardType;
                <h4 class="cardTypeHeader">@objCard.CardType.ToString()</h4>
                }

                }
                *@
                <br />
                <button class="btn btn-success"
                @onclick="SaveCardGuess">
                Save
                </button>
                @* </div>  *@

                </div>
            </div>
        </div>
    </div>
}


@code
{
    string _Error = "";
    List<Player> _Players = new List<Player>();
    List<Card> _Cards = new List<Card>();
    Player _objPlayer = new Player();
    Settings _settings = new Settings();
    CardType _prevCardType = CardType.Weapon;
    bool _ShowPlayerCardsPopup = false;
    bool _IsCardConfirmed = true;
    TickColour _cardTickColour;
    protected override async Task OnInitializedAsync()
    {
        // Get the forecasts
        _Players = await PlayerService.GetPlayersAsync();
        _Cards = await CardService.GetCardsAsync();
        _settings = await PlayerService.GetSettingsAsync();
        _cardTickColour = _settings.DefaultTickColour;
    }

    void AddNewSeenCardEvent()
    {
        // Make new forecast
        _objPlayer = new Player();
        // Set Id to 0 so we know it is a new record
        _objPlayer.Id = 0;
        // Open the Popup for confirmed cards.
        _IsCardConfirmed = true;
        _ShowPlayerCardsPopup = true;
    }

    void AddNewCardGuessEvent()
    {
        // Make new forecast
        _objPlayer = new Player();
        // Set Id to 0 so we know it is a new record
        _objPlayer.Id = 0;
        // Open the Popup for a guess event.
        _IsCardConfirmed = false;
        _ShowPlayerCardsPopup = true;
    }
    void EditPlayerCards(Player player)
    {
        // Set the selected forecast
        // as the current forecast
        _objPlayer = player;
        // Open the Popup
        _ShowPlayerCardsPopup = true;
    }

    void ClosePopup()
    {
        string _Error = "";
        _ShowPlayerCardsPopup = false;
    }
    async Task CardSeen(Card objCard, TickColour _cardTickColour)
    {
        try
        {
            if (_objPlayer.HeldCards.Where(c => c.CardId == objCard.Id).Any())
            {
                _objPlayer.HeldCards.Single(c => c.CardId == objCard.Id).IsConfirmed = true;

            }
            else
            {
                _objPlayer.HeldCards.Add(new HeldCard()
                    {
                        Card = objCard,
                        CardId = objCard.Id,
                        PlayerId = _objPlayer.Id,
                        IsConfirmed = true,
                        TickColour = _cardTickColour,
                    });
            }
            await PlayerService.UpdatePlayerCardsAsync(_objPlayer);
            await OnInitializedAsync();
            ClosePopup();

        }
        catch (Exception ex)
        {
            _Error = ex.Message;
        }
    }
    async Task SaveCardGuess()
    {
        // Close the Popup
        // _ShowPlayerCardsPopup = false;
        _Error = "";
        try
        {
            
                await CardService.CreateHeldCardGuess(_Players, _Cards.Where(w => w.Selected).ToList());
        }
        catch (Exception ex)
        {
            _Error = ex.Message;
        }
        await OnInitializedAsync(); /* Should rework to not require page refresh???  */
        ClosePopup();

    }
}